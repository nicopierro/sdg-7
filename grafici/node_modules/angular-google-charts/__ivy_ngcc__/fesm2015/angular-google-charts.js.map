{"version":3,"file":"angular-google-charts.js","sources":["../../../libs/angular-google-charts/src/lib/components/chart-editor/chart-editor-ref.ts","../../../libs/angular-google-charts/src/lib/types/chart-type.ts","../../../libs/angular-google-charts/src/lib/helpers/chart.helper.ts","../../../libs/angular-google-charts/src/lib/types/google-charts-config.ts","../../../libs/angular-google-charts/src/lib/services/script-loader.service.ts","../../../libs/angular-google-charts/src/lib/components/chart-editor/chart-editor.component.ts","../../../libs/angular-google-charts/src/lib/services/data-table.service.ts","../../../libs/angular-google-charts/src/lib/helpers/id.helper.ts","../../../libs/angular-google-charts/src/lib/types/control-type.ts","../../../libs/angular-google-charts/src/lib/components/control-wrapper/control-wrapper.component.ts","../../../libs/angular-google-charts/src/lib/components/dashboard/dashboard.component.ts","../../../libs/angular-google-charts/src/lib/components/google-chart/google-chart.component.ts","../../../libs/angular-google-charts/src/lib/components/chart-wrapper/chart-wrapper.component.ts","../../../libs/angular-google-charts/src/lib/google-charts.module.ts","../../../libs/angular-google-charts/src/index.ts","../../../libs/angular-google-charts/src/angular-google-charts.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"./types.ts\" />\n\nimport { Observable, Subject } from 'rxjs';\n\nexport type EditChartResult = google.visualization.ChartWrapper | null;\n\nexport class ChartEditorRef {\n  private readonly doneSubject = new Subject<EditChartResult>();\n\n  constructor(private readonly editor: google.visualization.ChartEditor) {\n    this.addEventListeners();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n  public afterClosed(): Observable<EditChartResult> {\n    return this.doneSubject.asObservable();\n  }\n\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n  public cancel() {\n    this.editor.closeDialog();\n  }\n\n  private addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      const updatedChartWrapper = this.editor.getChartWrapper();\n\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n}\n","export enum ChartType {\n  AnnotationChart = 'AnnotationChart',\n  AreaChart = 'AreaChart',\n  Bar = 'Bar',\n  BarChart = 'BarChart',\n  BubbleChart = 'BubbleChart',\n  Calendar = 'Calendar',\n  CandlestickChart = 'CandlestickChart',\n  ColumnChart = 'ColumnChart',\n  ComboChart = 'ComboChart',\n  PieChart = 'PieChart',\n  Gantt = 'Gantt',\n  Gauge = 'Gauge',\n  GeoChart = 'GeoChart',\n  Histogram = 'Histogram',\n  Line = 'Line',\n  LineChart = 'LineChart',\n  Map = 'Map',\n  OrgChart = 'OrgChart',\n  Sankey = 'Sankey',\n  Scatter = 'Scatter',\n  ScatterChart = 'ScatterChart',\n  SteppedAreaChart = 'SteppedAreaChart',\n  Table = 'Table',\n  Timeline = 'Timeline',\n  TreeMap = 'TreeMap',\n  WordTree = 'wordtree'\n}\n","import { ChartType } from '../types/chart-type';\nimport { GoogleChartsConfig } from '../types/google-charts-config';\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nexport function getPackageForChart(type: ChartType): string {\n  return ChartTypesToPackages[type];\n}\n\nexport function getDefaultConfig(): GoogleChartsConfig {\n  return {\n    version: 'current',\n    safeMode: false\n  };\n}\n","import { inject, InjectFlags, InjectionToken } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { getDefaultConfig } from '../helpers/chart.helper';\n\nexport interface GoogleChartsConfig {\n  /**\n   * This setting lets you specify a key that you may use with Geochart and Map Chart.\n   * You may want to do this rather than using the default behavior which may result in\n   * occasional throttling of service for your users.\n   *\n   * Only available when using Google Charts 45 or higher.\n   *\n   * {@link https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings Parameter documentation }\n   * {@link https://developers.google.com/chart/interactive/docs/gallery/geochart GeoChart Documentation}\n   */\n  mapsApiKey?: string;\n\n  /**\n   * Which version of Google Charts to use.\n   *\n   * Please note that this library does only work with Google Charts 45 or higher.\n   *\n   * @description\n   * Can be either a number specifying a\n   * {@link https://developers.google.com/chart/interactive/docs/release_notes#current:-january-6,-2020 frozen version } of Google Charts\n   * or one of the special versions `current` and `upcoming`.\n   *\n   * Defaults to `current`.\n   *\n   * {@link https://developers.google.com/chart/interactive/docs/basic_load_libs#basic-library-loading Offical Documentation}\n   */\n  version?: string;\n\n  /**\n   * When set to true, all charts and tooltips that generate HTML from user-supplied data will sanitize it\n   * by stripping out unsafe elements and attributes.\n   *\n   * Only available when using GoogleCharts 47 or higher.\n   *\n   * {@link https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings Parameter documentation }\n   */\n  safeMode?: boolean;\n}\n\nexport const GOOGLE_CHARTS_CONFIG = new InjectionToken<Observable<GoogleChartsConfig>>('GOOGLE_CHARTS_CONFIG');\nexport const GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken<Observable<GoogleChartsConfig>>(\n  'GOOGLE_CHARTS_LAZY_CONFIG',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n      return of({ ...getDefaultConfig(), ...(configFromModule || {}) });\n    }\n  }\n);\n","import { Inject, Injectable, LOCALE_ID, NgZone } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { getDefaultConfig } from '../helpers/chart.helper';\nimport { GoogleChartsConfig, GOOGLE_CHARTS_LAZY_CONFIG } from '../types/google-charts-config';\n\n@Injectable()\nexport class ScriptLoaderService {\n  private readonly scriptSource = 'https://www.gstatic.com/charts/loader.js';\n  private readonly scriptLoadSubject = new Subject<null>();\n\n  constructor(\n    private zone: NgZone,\n    @Inject(LOCALE_ID) private localeId: string,\n    @Inject(GOOGLE_CHARTS_LAZY_CONFIG) private readonly config$: Observable<GoogleChartsConfig>\n  ) {}\n\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n  public isGoogleChartsAvailable(): boolean {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n  public loadChartPackages(...packages: string[]): Observable<null> {\n    return this.loadGoogleCharts().pipe(\n      mergeMap(() => this.config$),\n      map(config => {\n        return { ...getDefaultConfig(), ...(config || {}) };\n      }),\n      switchMap((googleChartsConfig: GoogleChartsConfig) => {\n        return new Observable<null>(observer => {\n          const config = {\n            packages,\n            language: this.localeId,\n            mapsApiKey: googleChartsConfig.mapsApiKey,\n            safeMode: googleChartsConfig.safeMode\n          };\n\n          google.charts.load(googleChartsConfig.version!, config);\n          google.charts.setOnLoadCallback(() => {\n            this.zone.run(() => {\n              observer.next();\n              observer.complete();\n            });\n          });\n        });\n      })\n    );\n  }\n\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n  private loadGoogleCharts(): Observable<null> {\n    if (this.isGoogleChartsAvailable()) {\n      return of(null);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  private isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  private getGoogleChartsScript(): HTMLScriptElement | undefined {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  private createGoogleChartsScript(): HTMLScriptElement {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n}\n","/// <reference path=\"./types.ts\" />\n\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\nimport { ChartEditorRef } from './chart-editor-ref';\n\n@Component({\n  selector: 'chart-editor',\n  template: `<ng-content></ng-content>`,\n  host: { class: 'chart-editor' },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartEditorComponent implements OnInit {\n  private editor: google.visualization.ChartEditor | undefined;\n  private initializedSubject = new Subject<google.visualization.ChartEditor>();\n\n  constructor(private scriptLoaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n  public get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  public ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  /**\n   * Opens the chart editor as an embedded dialog box on the page.\n   * If the editor gets saved, the components' chart will be updated with the result.\n   *\n   * @param component The chart to be edited.\n   * @returns A reference to the open editor.\n   */\n  public editChart(component: ChartBase): ChartEditorRef;\n  public editChart(component: ChartBase, options: google.visualization.ChartEditorOptions): ChartEditorRef;\n  public editChart(component: ChartBase, options?: google.visualization.ChartEditorOptions) {\n    if (!component.chartWrapper) {\n      throw new Error(\n        'Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.'\n      );\n    }\n    if (!this.editor) {\n      throw new Error(\n        'Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.'\n      );\n    }\n\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n\n    return handle;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Column, Row } from '../components/chart-base/chart-base.component';\nimport { Formatter } from '../types/formatter';\n\n@Injectable({ providedIn: 'root' })\nexport class DataTableService {\n  public create(\n    data: Row[] | undefined,\n    columns?: Column[],\n    formatters?: Formatter[]\n  ): google.visualization.DataTable | undefined {\n    if (data == null) {\n      return undefined;\n    }\n\n    let firstRowIsData = true;\n    if (columns != null) {\n      firstRowIsData = false;\n    }\n\n    const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n    }\n\n    return dataTable;\n  }\n\n  private getDataAsTable(data: Row[], columns: Column[] | undefined): (Row | Column[])[] {\n    if (columns) {\n      return [columns, ...data];\n    } else {\n      return data;\n    }\n  }\n\n  private applyFormatters(dataTable: google.visualization.DataTable, formatters: Formatter[]): void {\n    for (const val of formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n}\n","/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nexport function generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n","export enum FilterType {\n  Category = 'CategoryFilter',\n  ChartRange = 'ChartRangeFilter',\n  DateRange = 'DateRangeFilter',\n  NumberRange = 'NumberRangeFilter',\n  String = 'StringFilter'\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { generateRandomId } from '../../helpers/id.helper';\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { FilterType } from '../../types/control-type';\nimport { ChartErrorEvent, ChartReadyEvent } from '../../types/events';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'control-wrapper',\n  template: '',\n  host: { class: 'control-wrapper' },\n  exportAs: 'controlWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlWrapperComponent implements OnInit, OnChanges {\n  /**\n   * Charts controlled by this control wrapper. Can be a single chart or an array of charts.\n   */\n  @Input()\n  public for!: ChartBase | ChartBase[];\n\n  /**\n   * The class name of the control.\n   * The `google.visualization` package name can be omitted for Google controls.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper type=\"CategoryFilter\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public type!: FilterType;\n\n  /**\n   * An object describing the options for the control.\n   * You can use either JavaScript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper [options]=\"{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public options?: object;\n\n  /**\n   * An object describing the state of the control.\n   * The state collects all the variables that the user operating the control can affect.\n   *\n   * For example, a range slider state can be described in term of the positions that the low and high thumb\n   * of the slider occupy.\n   * You can use either Javascript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   *  ```html\n   * <control-wrapper [state]=\"{'lowValue': 20, 'highValue': 50}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public state?: object;\n\n  /**\n   * Emits when an error occurs when attempting to render the control.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  /**\n   * The control is ready to accept user interaction and for external method calls.\n   *\n   * Alternatively, you can listen for a ready event on the dashboard holding the control\n   * and call control methods only after the event was fired.\n   */\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  /**\n   * Emits when the user interacts with the control, affecting its state.\n   * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n   *\n   * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n   */\n  @Output()\n  public stateChange = new EventEmitter<unknown>();\n\n  /**\n   * A generated id assigned to this components DOM element.\n   */\n  @HostBinding('id')\n  public readonly id = generateRandomId();\n\n  private _controlWrapper?: google.visualization.ControlWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ControlWrapper>(1);\n\n  constructor(private loaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get controlWrapper(): google.visualization.ControlWrapper {\n    if (!this._controlWrapper) {\n      throw new Error(`Cannot access the control wrapper before it being initialized.`);\n    }\n\n    return this._controlWrapper;\n  }\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (!this._controlWrapper) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options || {});\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state || {});\n    }\n  }\n\n  private createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  private addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n\n    google.visualization.events.addListener(this._controlWrapper, 'ready', (event: ChartReadyEvent) =>\n      this.ready.emit(event)\n    );\n    google.visualization.events.addListener(this._controlWrapper, 'error', (event: ChartErrorEvent) =>\n      this.error.emit(event)\n    );\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', (event: unknown) =>\n      this.stateChange.emit(event)\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges\n} from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { DataTableService } from '../../services/data-table.service';\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { ChartErrorEvent } from '../../types/events';\nimport { Formatter } from '../../types/formatter';\nimport { Column, Row } from '../chart-base/chart-base.component';\nimport { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';\n\n@Component({\n  selector: 'dashboard',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'dashboard',\n  host: { class: 'dashboard' }\n})\nexport class DashboardComponent implements OnInit, OnChanges {\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns?: Column[];\n\n  /**\n   * Used to change the displayed value of the specified column in all rows.\n   *\n   * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n   * and the index of the column you want the formatter to get applied to.\n   */\n  @Input()\n  public formatters?: Formatter[];\n\n  /**\n   * The dashboard has completed drawing and is ready to accept changes.\n   *\n   * The ready event will also fire:\n   * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n   * - after redrawing any chart on the dashboard.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when an error occurs when attempting to render the dashboard.\n   * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @ContentChildren(ControlWrapperComponent)\n  private controlWrappers!: QueryList<ControlWrapperComponent>;\n\n  private dashboard?: google.visualization.Dashboard;\n  private dataTable?: google.visualization.DataTable;\n  private initialized = false;\n\n  constructor(\n    private element: ElementRef,\n    private loaderService: ScriptLoaderService,\n    private dataTableService: DataTableService\n  ) {}\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns || changes.formatters) {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.dashboard!.draw(this.dataTable!);\n    }\n  }\n\n  private createDashboard(): void {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers\n      .map(control => control.for)\n      .map(charts => {\n        if (Array.isArray(charts)) {\n          // CombineLatest waits for all observables\n          return combineLatest(charts.map(chart => chart.wrapperReady$));\n        } else {\n          return charts.wrapperReady$;\n        }\n      });\n\n    // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.registerEvents();\n      this.dashboard.draw(this.dataTable!);\n    });\n  }\n\n  private registerEvents(): void {\n    google.visualization.events.removeAllListeners(this.dashboard);\n\n    const registerDashEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n    registerDashEvent(this.dashboard, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n  }\n\n  private initializeBindings(): void {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard!.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard!.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { getPackageForChart } from '../../helpers/chart.helper';\nimport { DataTableService } from '../../services/data-table.service';\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { ChartType } from '../../types/chart-type';\nimport {\n  ChartErrorEvent,\n  ChartMouseLeaveEvent,\n  ChartMouseOverEvent,\n  ChartReadyEvent,\n  ChartSelectionChangedEvent\n} from '../../types/events';\nimport { Formatter } from '../../types/formatter';\nimport { ChartBase, Column, Row } from '../chart-base/chart-base.component';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\n\n@Component({\n  selector: 'google-chart',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'google-chart' },\n  exportAs: 'googleChart',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleChartComponent implements ChartBase, OnInit, OnChanges, OnDestroy {\n  /**\n   * The type of the chart to create.\n   */\n  @Input()\n  public type!: ChartType;\n\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns?: Column[];\n\n  /**\n   * A convenience property used to set the title of the chart.\n   *\n   * This can also be set using `options.title`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public title?: string;\n\n  /**\n   * A convenience property used to set the width of the chart in pixels.\n   *\n   * This can also be set using `options.width`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public width?: number;\n\n  /**\n   * A convenience property used to set the height of the chart in pixels.\n   *\n   * This can also be set using `options.height`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public height?: number;\n\n  /**\n   * The chart-specific options. All options listen in the Google Charts documentation applying\n   * to the chart type specified can be used here.\n   */\n  @Input()\n  public options: object = {};\n\n  /**\n   * Used to change the displayed value of the specified column in all rows.\n   *\n   * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n   * and the index of the column you want the formatter to get applied to.\n   */\n  @Input()\n  public formatters?: Formatter[];\n\n  /**\n   * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n   * Defaults to `false` and should only be used when specifying the width or height of the chart\n   * in percent.\n   *\n   * Note that this can impact performance.\n   */\n  @Input()\n  public dynamicResize = false;\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  @Output()\n  public mouseover = new EventEmitter<ChartMouseOverEvent>();\n\n  @Output()\n  public mouseleave = new EventEmitter<ChartMouseLeaveEvent>();\n\n  private resizeSubscription?: Subscription;\n\n  private dataTable: google.visualization.DataTable | undefined;\n  private wrapper: google.visualization.ChartWrapper | undefined;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n  private eventListeners = new Map<any, { eventName: string; callback: Function; handle: any }>();\n\n  constructor(\n    private element: ElementRef,\n    private scriptLoaderService: ScriptLoaderService,\n    private dataTableService: DataTableService,\n    @Optional() private dashboard?: DashboardComponent\n  ) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    return this.chartWrapper.getChart();\n  }\n\n  public get wrapperReady$(): Observable<google.visualization.ChartWrapper> {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper {\n    if (!this.wrapper) {\n      throw new Error('Trying to access the chart wrapper before it was fully initialized');\n    }\n\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n\n      // Only ever create the wrapper once to allow animations to happen when something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n\n      this.drawChart();\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n      if (changes.data || changes.columns || changes.formatters) {\n        this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n        this.wrapper!.setDataTable(this.dataTable!);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper!.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper!.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.unsubscribeToResizeIfSubscribed();\n  }\n\n  /**\n   * For listening to events other than the most common ones (available via Output properties).\n   *\n   * Can be called after the chart emits that it's \"ready\".\n   *\n   * Returns a handle that can be used for `removeEventListener`.\n   */\n  public addEventListener(eventName: string, callback: Function): any {\n    const handle = this.registerChartEvent(this.chart, eventName, callback);\n    this.eventListeners.set(handle, { eventName, callback, handle });\n    return handle;\n  }\n\n  public removeEventListener(handle: any): void {\n    const entry = this.eventListeners.get(handle);\n    if (entry) {\n      google.visualization.events.removeListener(entry.handle);\n      this.eventListeners.delete(handle);\n    }\n  }\n\n  private updateResizeListener() {\n    this.unsubscribeToResizeIfSubscribed();\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize', { passive: true })\n        .pipe(debounceTime(100))\n        .subscribe(() => {\n          if (this.initialized) {\n            this.drawChart();\n          }\n        });\n    }\n  }\n\n  private unsubscribeToResizeIfSubscribed() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = undefined;\n    }\n  }\n\n  private mergeOptions(): object {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    this.registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      this.registerChartEvent(this.chart, 'onmouseover', (event: ChartMouseOverEvent) => this.mouseover.emit(event));\n      this.registerChartEvent(this.chart, 'onmouseout', (event: ChartMouseLeaveEvent) => this.mouseleave.emit(event));\n      this.registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart!.getSelection();\n        this.select.emit({ selection });\n      });\n      this.eventListeners.forEach(x => (x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback)));\n\n      this.ready.emit({ chart: this.chart! });\n    });\n\n    this.registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n  }\n\n  private registerChartEvent(object: any, eventName: string, callback: Function): any {\n    return google.visualization.events.addListener(object, eventName, callback);\n  }\n\n  private drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper!.draw();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { ChartErrorEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../types/events';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'chart-wrapper',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'chart-wrapper' },\n  exportAs: 'chartWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartWrapperComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * Either a JSON object defining the chart, or a serialized string version of that object.\n   * The format of this object is shown in the\n   * {@link https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart `drawChart()`} documentation.\n   *\n   * The `container` and `containerId` will be overwritten by this component to allow\n   * rendering the chart into the components' template.\n   */\n  @Input()\n  public specs?: google.visualization.ChartSpecs;\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  private wrapper: google.visualization.ChartWrapper | undefined;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(private element: ElementRef, private scriptLoaderService: ScriptLoaderService) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    return this.chartWrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper {\n    if (!this.wrapper) {\n      throw new Error('Cannot access the chart wrapper before initialization.');\n    }\n\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {} as google.visualization.ChartSpecs;\n      }\n\n      const { containerId, container, ...specs } = this.specs;\n\n      // Only ever create the wrapper once to allow animations to happen if something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  private updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {} as google.visualization.ChartSpecs;\n    }\n\n    // The typing here are not correct. These methods accept `undefined` as well.\n    // That's why we have to cast to `any`\n\n    this.wrapper!.setChartType(this.specs.chartType);\n    this.wrapper!.setDataTable(this.specs.dataTable as any);\n    this.wrapper!.setDataSourceUrl(this.specs.dataSourceUrl as any);\n    this.wrapper!.setDataSourceUrl(this.specs.dataSourceUrl as any);\n    this.wrapper!.setQuery(this.specs.query as any);\n    this.wrapper!.setOptions(this.specs.options as any);\n    this.wrapper!.setRefreshInterval(this.specs.refreshInterval as any);\n    this.wrapper!.setView(this.specs.view);\n  }\n\n  private drawChart() {\n    if (this.wrapper) {\n      this.wrapper.draw();\n    }\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart! }));\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart!.getSelection();\n      this.select.emit({ selection });\n    });\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ChartEditorComponent } from './components/chart-editor/chart-editor.component';\nimport { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';\nimport { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { GoogleChartComponent } from './components/google-chart/google-chart.component';\nimport { ScriptLoaderService } from './services/script-loader.service';\nimport { GoogleChartsConfig, GOOGLE_CHARTS_CONFIG } from './types/google-charts-config';\n\n@NgModule({\n  declarations: [\n    GoogleChartComponent,\n    ChartWrapperComponent,\n    DashboardComponent,\n    ControlWrapperComponent,\n    ChartEditorComponent\n  ],\n  providers: [ScriptLoaderService],\n  exports: [\n    GoogleChartComponent,\n    ChartWrapperComponent,\n    DashboardComponent,\n    ControlWrapperComponent,\n    ChartEditorComponent\n  ]\n})\nexport class GoogleChartsModule {\n  public static forRoot(config: GoogleChartsConfig = {}): ModuleWithProviders<GoogleChartsModule> {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-google-charts\n */\n\nexport * from './lib/components/chart-editor/chart-editor-ref';\nexport * from './lib/components/chart-editor/chart-editor.component';\nexport * from './lib/components/google-chart/google-chart.component';\nexport * from './lib/components/chart-wrapper/chart-wrapper.component';\nexport * from './lib/components/dashboard/dashboard.component';\nexport * from './lib/components/control-wrapper/control-wrapper.component';\nexport * from './lib/components/chart-base/chart-base.component';\n\nexport * from './lib/helpers/chart.helper';\n\nexport * from './lib/types/chart-type';\nexport * from './lib/types/control-type';\nexport * from './lib/types/events';\nexport * from './lib/types/formatter';\nexport * from './lib/types/google-charts-config';\n\nexport * from './lib/services/script-loader.service';\n\nexport * from './lib/google-charts.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DataTableService as ɵa} from './lib/services/data-table.service';"]}