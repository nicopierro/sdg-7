import { ChartType } from '../types/chart-type';
const ChartTypesToPackages = {
    [ChartType.AnnotationChart]: 'annotationchart',
    [ChartType.AreaChart]: 'corechart',
    [ChartType.Bar]: 'bar',
    [ChartType.BarChart]: 'corechart',
    [ChartType.BubbleChart]: 'corechart',
    [ChartType.Calendar]: 'calendar',
    [ChartType.CandlestickChart]: 'corechart',
    [ChartType.ColumnChart]: 'corechart',
    [ChartType.ComboChart]: 'corechart',
    [ChartType.PieChart]: 'corechart',
    [ChartType.Gantt]: 'gantt',
    [ChartType.Gauge]: 'gauge',
    [ChartType.GeoChart]: 'geochart',
    [ChartType.Histogram]: 'corechart',
    [ChartType.Line]: 'line',
    [ChartType.LineChart]: 'corechart',
    [ChartType.Map]: 'map',
    [ChartType.OrgChart]: 'orgchart',
    [ChartType.Sankey]: 'sankey',
    [ChartType.Scatter]: 'scatter',
    [ChartType.ScatterChart]: 'corechart',
    [ChartType.SteppedAreaChart]: 'corechart',
    [ChartType.Table]: 'table',
    [ChartType.Timeline]: 'timeline',
    [ChartType.TreeMap]: 'treemap',
    [ChartType.WordTree]: 'wordtree'
};
export function getPackageForChart(type) {
    return ChartTypesToPackages[type];
}
export function getDefaultConfig() {
    return {
        version: 'current',
        safeMode: false
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9oZWxwZXJzL2NoYXJ0LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHaEQsTUFBTSxvQkFBb0IsR0FBRztJQUMzQixDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsRUFBRSxpQkFBaUI7SUFDOUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVztJQUNsQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLO0lBQ3RCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFdBQVc7SUFDakMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsV0FBVztJQUNwQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVO0lBQ2hDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsV0FBVztJQUN6QyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxXQUFXO0lBQ3BDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFdBQVc7SUFDbkMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsV0FBVztJQUNqQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPO0lBQzFCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU87SUFDMUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVTtJQUNoQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxXQUFXO0lBQ2xDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU07SUFDeEIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVztJQUNsQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLO0lBQ3RCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVU7SUFDaEMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUTtJQUM1QixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTO0lBQzlCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLFdBQVc7SUFDckMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxXQUFXO0lBQ3pDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU87SUFDMUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVTtJQUNoQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTO0lBQzlCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVU7Q0FDakMsQ0FBQztBQUVGLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxJQUFlO0lBQ2hELE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsT0FBTztRQUNMLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhcnRUeXBlIH0gZnJvbSAnLi4vdHlwZXMvY2hhcnQtdHlwZSc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNDb25maWcgfSBmcm9tICcuLi90eXBlcy9nb29nbGUtY2hhcnRzLWNvbmZpZyc7XG5cbmNvbnN0IENoYXJ0VHlwZXNUb1BhY2thZ2VzID0ge1xuICBbQ2hhcnRUeXBlLkFubm90YXRpb25DaGFydF06ICdhbm5vdGF0aW9uY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkFyZWFDaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkJhcl06ICdiYXInLFxuICBbQ2hhcnRUeXBlLkJhckNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuQnViYmxlQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5DYWxlbmRhcl06ICdjYWxlbmRhcicsXG4gIFtDaGFydFR5cGUuQ2FuZGxlc3RpY2tDaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkNvbHVtbkNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuQ29tYm9DaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLlBpZUNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuR2FudHRdOiAnZ2FudHQnLFxuICBbQ2hhcnRUeXBlLkdhdWdlXTogJ2dhdWdlJyxcbiAgW0NoYXJ0VHlwZS5HZW9DaGFydF06ICdnZW9jaGFydCcsXG4gIFtDaGFydFR5cGUuSGlzdG9ncmFtXTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuTGluZV06ICdsaW5lJyxcbiAgW0NoYXJ0VHlwZS5MaW5lQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5NYXBdOiAnbWFwJyxcbiAgW0NoYXJ0VHlwZS5PcmdDaGFydF06ICdvcmdjaGFydCcsXG4gIFtDaGFydFR5cGUuU2Fua2V5XTogJ3NhbmtleScsXG4gIFtDaGFydFR5cGUuU2NhdHRlcl06ICdzY2F0dGVyJyxcbiAgW0NoYXJ0VHlwZS5TY2F0dGVyQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5TdGVwcGVkQXJlYUNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuVGFibGVdOiAndGFibGUnLFxuICBbQ2hhcnRUeXBlLlRpbWVsaW5lXTogJ3RpbWVsaW5lJyxcbiAgW0NoYXJ0VHlwZS5UcmVlTWFwXTogJ3RyZWVtYXAnLFxuICBbQ2hhcnRUeXBlLldvcmRUcmVlXTogJ3dvcmR0cmVlJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhY2thZ2VGb3JDaGFydCh0eXBlOiBDaGFydFR5cGUpOiBzdHJpbmcge1xuICByZXR1cm4gQ2hhcnRUeXBlc1RvUGFja2FnZXNbdHlwZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0Q29uZmlnKCk6IEdvb2dsZUNoYXJ0c0NvbmZpZyB7XG4gIHJldHVybiB7XG4gICAgdmVyc2lvbjogJ2N1cnJlbnQnLFxuICAgIHNhZmVNb2RlOiBmYWxzZVxuICB9O1xufVxuIl19