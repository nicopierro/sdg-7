{"version":3,"file":"google-chart.component.d.ts","sources":["google-chart.component.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"@types/google.visualization\" />\nimport { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DataTableService } from '../../services/data-table.service';\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { ChartType } from '../../types/chart-type';\nimport { ChartErrorEvent, ChartMouseLeaveEvent, ChartMouseOverEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../types/events';\nimport { Formatter } from '../../types/formatter';\nimport { ChartBase, Column, Row } from '../chart-base/chart-base.component';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\nexport declare class GoogleChartComponent implements ChartBase, OnInit, OnChanges, OnDestroy {\n    private element;\n    private scriptLoaderService;\n    private dataTableService;\n    private dashboard?;\n    /**\n     * The type of the chart to create.\n     */\n    type: ChartType;\n    /**\n     * Data used to initialize the table.\n     *\n     * This must also contain all roles that are set in the `columns` property.\n     */\n    data: Row[];\n    /**\n     * The columns the `data` consists of.\n     * The length of this array must match the length of each row in the `data` object.\n     *\n     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n     */\n    columns?: Column[];\n    /**\n     * A convenience property used to set the title of the chart.\n     *\n     * This can also be set using `options.title`, which, if existant, will overwrite this value.\n     */\n    title?: string;\n    /**\n     * A convenience property used to set the width of the chart in pixels.\n     *\n     * This can also be set using `options.width`, which, if existant, will overwrite this value.\n     */\n    width?: number;\n    /**\n     * A convenience property used to set the height of the chart in pixels.\n     *\n     * This can also be set using `options.height`, which, if existant, will overwrite this value.\n     */\n    height?: number;\n    /**\n     * The chart-specific options. All options listen in the Google Charts documentation applying\n     * to the chart type specified can be used here.\n     */\n    options: object;\n    /**\n     * Used to change the displayed value of the specified column in all rows.\n     *\n     * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n     * and the index of the column you want the formatter to get applied to.\n     */\n    formatters?: Formatter[];\n    /**\n     * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n     * Defaults to `false` and should only be used when specifying the width or height of the chart\n     * in percent.\n     *\n     * Note that this can impact performance.\n     */\n    dynamicResize: boolean;\n    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;\n    error: EventEmitter<ChartErrorEvent>;\n    select: EventEmitter<ChartSelectionChangedEvent>;\n    mouseover: EventEmitter<ChartMouseOverEvent>;\n    mouseleave: EventEmitter<ChartMouseLeaveEvent>;\n    private resizeSubscription?;\n    private dataTable;\n    private wrapper;\n    private wrapperReadySubject;\n    private initialized;\n    private eventListeners;\n    constructor(element: ElementRef, scriptLoaderService: ScriptLoaderService, dataTableService: DataTableService, dashboard?: DashboardComponent | undefined);\n    get chart(): google.visualization.ChartBase | null;\n    get wrapperReady$(): Observable<google.visualization.ChartWrapper>;\n    get chartWrapper(): google.visualization.ChartWrapper;\n    set chartWrapper(wrapper: google.visualization.ChartWrapper);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * For listening to events other than the most common ones (available via Output properties).\n     *\n     * Can be called after the chart emits that it's \"ready\".\n     *\n     * Returns a handle that can be used for `removeEventListener`.\n     */\n    addEventListener(eventName: string, callback: Function): any;\n    removeEventListener(handle: any): void;\n    private updateResizeListener;\n    private unsubscribeToResizeIfSubscribed;\n    private mergeOptions;\n    private registerChartEvents;\n    private registerChartEvent;\n    private drawChart;\n}\n"]}