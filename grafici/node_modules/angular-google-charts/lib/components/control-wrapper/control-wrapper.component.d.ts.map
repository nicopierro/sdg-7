{"version":3,"file":"control-wrapper.component.d.ts","sources":["control-wrapper.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"@types/google.visualization\" />\nimport { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ScriptLoaderService } from '../../services/script-loader.service';\nimport { FilterType } from '../../types/control-type';\nimport { ChartErrorEvent, ChartReadyEvent } from '../../types/events';\nimport { ChartBase } from '../chart-base/chart-base.component';\nexport declare class ControlWrapperComponent implements OnInit, OnChanges {\n    private loaderService;\n    /**\n     * Charts controlled by this control wrapper. Can be a single chart or an array of charts.\n     */\n    for: ChartBase | ChartBase[];\n    /**\n     * The class name of the control.\n     * The `google.visualization` package name can be omitted for Google controls.\n     *\n     * @example\n     *\n     * ```html\n     * <control-wrapper type=\"CategoryFilter\"></control-wrapper>\n     * ```\n     */\n    type: FilterType;\n    /**\n     * An object describing the options for the control.\n     * You can use either JavaScript literal notation, or provide a handle to the object.\n     *\n     * @example\n     *\n     * ```html\n     * <control-wrapper [options]=\"{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}\"></control-wrapper>\n     * ```\n     */\n    options?: object;\n    /**\n     * An object describing the state of the control.\n     * The state collects all the variables that the user operating the control can affect.\n     *\n     * For example, a range slider state can be described in term of the positions that the low and high thumb\n     * of the slider occupy.\n     * You can use either Javascript literal notation, or provide a handle to the object.\n     *\n     * @example\n     *\n     *  ```html\n     * <control-wrapper [state]=\"{'lowValue': 20, 'highValue': 50}\"></control-wrapper>\n     * ```\n     */\n    state?: object;\n    /**\n     * Emits when an error occurs when attempting to render the control.\n     */\n    error: EventEmitter<ChartErrorEvent>;\n    /**\n     * The control is ready to accept user interaction and for external method calls.\n     *\n     * Alternatively, you can listen for a ready event on the dashboard holding the control\n     * and call control methods only after the event was fired.\n     */\n    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;\n    /**\n     * Emits when the user interacts with the control, affecting its state.\n     * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n     *\n     * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n     */\n    stateChange: EventEmitter<unknown>;\n    /**\n     * A generated id assigned to this components DOM element.\n     */\n    readonly id: string;\n    private _controlWrapper?;\n    private wrapperReadySubject;\n    constructor(loaderService: ScriptLoaderService);\n    /**\n     * Emits after the `ControlWrapper` was created.\n     */\n    get wrapperReady$(): import(\"rxjs\").Observable<google.visualization.ControlWrapper>;\n    get controlWrapper(): google.visualization.ControlWrapper;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private createControlWrapper;\n    private addEventListeners;\n}\n"]}